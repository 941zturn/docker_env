version: '3.6'
services:
  elasticsearch:
    image: elasticsearch:wzh
    container_name: elasticsearch
    environment:
      - cluster.name=docker-cluster
      - node.name=elasticsearch
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    ports:
      - 10.147.17.28:9200:9200
    networks:
      - esnet
  elasticsearch2:
    image: elasticsearch:wzh
    container_name: elasticsearch2
    environment:
      - cluster.name=docker-cluster
      - node.name=elasticsearch2
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "discovery.zen.ping.unicast.hosts=elasticsearch"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata2:/usr/share/elasticsearch/data
    networks:
      - esnet
    depends_on:
      - elasticsearch
  elasticsearch3:
    image: elasticsearch:wzh
    container_name: elasticsearch3
    environment:
      - cluster.name=docker-cluster
      - node.name=elasticsearch3
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "discovery.zen.ping.unicast.hosts=elasticsearch"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata3:/usr/share/elasticsearch/data
    networks:
      - esnet
    depends_on:
      - elasticsearch
  kibana:
    image: docker.elastic.co/kibana/kibana-oss:6.2.4
    container_name: kibana
    environment:
      - elasticsearch.url=http://elasticsearch:9200
    ports:
      - 10.147.17.28:5601:5601
    networks:
      - esnet
    depends_on:
      - elasticsearch
      - elasticsearch2
      - elasticsearch3
  elasticsearch_hq:
    image: elastichq/elasticsearch-hq 
    container_name: elasticsearch-hq
    environment:
      - HQ_DEFAULT_URL=http://elasticsearch:9200
    ports:
      - 10.147.17.28:5000:5000
    networks:
      - esnet
    depends_on:
      - elasticsearch
      - elasticsearch2
      - elasticsearch3
  filebeat:
    image: docker.elastic.co/beats/filebeat:6.2.4
    container_name: filebeat
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - /var/log:/mnt:ro
    networks:
      - esnet
    depends_on:
      - kibana
    user: root

  zoo1:
    image: zookeeper:3.4.12
    restart: unless-stopped
    hostname: zoo1
    # ports:
    #   - "2181:2181"
    environment:
        ZOO_MY_ID: 1
        ZOO_PORT: 2181
        ZOO_SERVERS: server.1=zoo1:2888:3888
    volumes:
      - kafka_zoo1_data:/data
      - kafka_zoo1_datalog:/datalog
    networks:
      - esnet

  kafka1:
    image: confluentinc/cp-kafka:4.1.1-2
    hostname: kafka1
    # ports:
    #   - "9092:9092"
    environment:
      # add the entry "127.0.0.1    kafka1" to your /etc/hosts file
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka1:9092"
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_kafka1_data:/var/lib/kafka/data
    networks:
      - esnet
    depends_on:
      - zoo1



  kafka-schema-registry:
    image: confluentinc/cp-schema-registry:4.1.1-2
    hostname: kafka-schema-registry
    restart: unless-stopped
    # ports:
    #   - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zoo1:2181
      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    depends_on:
      - zoo1
      - kafka1
    networks:
      - esnet

  schema-registry-ui:
    image: landoop/schema-registry-ui:0.9.4
    hostname: kafka-schema-registry-ui
    ports:
      - "10.147.17.28:8001:8000"
    environment:
      SCHEMAREGISTRY_URL: http://kafka-schema-registry:8081/
      PROXY: "true"
    depends_on:
      - kafka-schema-registry
    networks:
      - esnet

  kafka-rest-proxy:
    image: confluentinc/cp-kafka-rest:4.1.1-2
    hostname: kafka-rest-proxy
    # ports:
    #   - "8082:8082"
    environment:
      KAFKA_REST_ZOOKEEPER_CONNECT: zoo1:2181
      KAFKA_REST_LISTENERS: http://0.0.0.0:8082/
      KAFKA_REST_SCHEMA_REGISTRY_URL: http://kafka-schema-registry:8081/
      KAFKA_REST_HOST_NAME: kafka-rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: kafka1:9092
    depends_on:
      - zoo1
      - kafka1
      - kafka-schema-registry
    networks:
      - esnet

  kafka-topics-ui:
    image: landoop/kafka-topics-ui:0.9.3
    hostname: kafka-topics-ui
    ports:
      - "10.147.17.28:8000:8000"
    environment:
      KAFKA_REST_PROXY_URL: "http://kafka-rest-proxy:8082/"
      PROXY: "true"
    depends_on:
      - zoo1
      - kafka1
      - kafka-schema-registry
      - kafka-rest-proxy
    networks:
      - esnet

  kafka-connect:
    image: confluentinc/cp-kafka-connect:4.1.1-2
    hostname: kafka-connect
    # ports:
    #   - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka1:9092"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      # CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      # CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://kafka-schema-registry:8081'
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      # CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      # CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://kafka-schema-registry:8081'
      CONNECT_SCHEMA_REGISTRY_URL: 'http://kafka-schema-registry:8081'
      # CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_KEY_CONVERTER: "io.confluent.connect.avro.AvroConverter"
      # CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "io.confluent.connect.avro.AvroConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: "/usr/share/java"
      # CONNECT_NANE: "hdfs-sink"
      # CONNECT_CONNECTOR_CLASS: "io.confluent.connect.hdfs.HdfsSinkConnector"
      # CONNECT_TASKS_MAX: "1"
      # CONNECT_TOPICS: "wzh_filebeat"
      # CONNECT_HDFS_URL: "hdfs://namenode:9000"
      # CONNECT_FLUSH_SIZE: "3"
    depends_on:
      - zoo1
      - kafka1
      - kafka-schema-registry
      - kafka-rest-proxy
    networks:
      - esnet
    volumes:
      - /var/log:/mnt:ro

  kafka-connect-ui:
    image: landoop/kafka-connect-ui:0.9.4
    hostname: kafka-connect-ui
    ports:
      - "10.147.17.28:8003:8000"
    environment:
      CONNECT_URL: "http://kafka-connect:8083/"
      PROXY: "true"
    depends_on:
      - kafka-connect
    networks:
      - esnet

  zoonavigator-web:
    image: elkozmon/zoonavigator-web:0.5.0
    ports:
     - "10.147.17.28:8004:8000"
    environment:
      API_HOST: "zoonavigator-api"
      API_PORT: 9000
    links:
     - zoonavigator-api
    depends_on:
     - zoonavigator-api
    restart: unless-stopped
    networks:
      - esnet

  zoonavigator-api:
    image: elkozmon/zoonavigator-api:0.5.0
    environment:
      SERVER_HTTP_PORT: 9000
    restart: unless-stopped
    depends_on:
      - zoo1
    networks:
      - esnet

  hadoopmysql:
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: "root"
      MYSQL_DATABASE: "hive"
    restart: unless-stopped
    networks:
      - esnet
    volumes:
      - hadoopmysql:/var/lib/mysql

  namenode:
    image: hadoop:wzh
    environment:
      NAME_NODE_PORT: 9000
      NAME_NODE_ADDR: namenode
      NODE_IPS: "datanode1,datanode2,datanode3"
      SERVER_ROLE: "nn"
      FORMAT_NAMENODE: "true"
      START_YARN: "true"
      ALB_ADDR: hadoopmysql
    restart: unless-stopped
    ports:
      - "10.147.17.28:8088:8088"
      - "10.147.17.28:50070:50070"
    networks:
      - esnet
    volumes:
      - hadoop_namenode_data:/data
    depends_on:
      - hadoopmysql

  datanode1:
    image: hadoop:wzh
    environment:
      NAME_NODE_PORT: 9000
      NAME_NODE_ADDR: namenode
      NODE_IPS: "datanode1,datanode2,datanode3"
      SERVER_ROLE: "dn"
      FORMAT_NAMENODE: "true"
      START_YARN: "true"
    restart: unless-stopped
    networks:
      - esnet
    volumes:
      - hadoop_datanode1_data:/data
    depends_on:
      - namenode

  datanode2:
    image: hadoop:wzh
    environment:
      NAME_NODE_PORT: 9000
      NAME_NODE_ADDR: namenode
      NODE_IPS: "datanode1,datanode2,datanode3"
      SERVER_ROLE: "dn"
      FORMAT_NAMENODE: "true"
      START_YARN: "true"
    restart: unless-stopped
    networks:
      - esnet
    volumes:
      - hadoop_datanode2_data:/data
    depends_on:
      - namenode

  datanode3:
    image: hadoop:wzh
    environment:
      NAME_NODE_PORT: 9000
      NAME_NODE_ADDR: namenode
      NODE_IPS: "datanode1,datanode2,datanode3"
      SERVER_ROLE: "dn"
      FORMAT_NAMENODE: "true"
      START_YARN: "true"
    restart: unless-stopped
    networks:
      - esnet
    volumes:
      - hadoop_datanode3_data:/data
    depends_on:
      - namenode

  mysqldb:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: "root"
    networks:
      - esnet

  mysqladm:
    image: adminer
    restart: always
    ports:
      - "10.147.17.28:18080:8080"
    depends_on:
      - mysqldb
    networks:
      - esnet

volumes:
  hadoopmysql:
    driver: local
  hadoop_namenode_data:
    driver: local
  hadoop_datanode1_data:
    driver: local
  hadoop_datanode2_data:
    driver: local
  hadoop_datanode3_data:
    driver: local
  kafka_zoo1_data:
    driver: local
  kafka_zoo1_datalog:
    driver: local
  kafka_kafka1_data:
    driver: local
  esdata1:
    driver: local
  esdata2:
    driver: local
  esdata3:
    driver: local

networks:
  esnet: