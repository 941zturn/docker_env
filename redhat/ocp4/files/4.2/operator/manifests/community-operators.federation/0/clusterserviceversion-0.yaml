apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    capabilities: Basic Install
    categories: OpenShift Optional, Integration & Delivery
    certified: 'false'
    containerImage: quay.io/kubernetes-multicluster/federation-v2:v0.0.10
    createdAt: '2019-01-01T00:00:00Z'
    description: Gain Hybrid Cloud capabilities between your clusters with Kubernetes
      Federation.
    repository: https://github.com/openshift/federation-v2-operator
  name: federation.v0.0.10
  namespace: placeholder
spec:
  customresourcedefinitions:
    owned:
      - description: Represents endpoint information about a remote cluster
        displayName: Cluster Registry Application
        kind: Cluster
        name: clusters.clusterregistry.k8s.io
        version: v1alpha1
      - description: Represents a Domain name and nameserver for use with multicluster
          DNS
        displayName: Domain
        kind: Domain
        name: domains.multiclusterdns.federation.k8s.io
        version: v1alpha1
      - description: Represents a Cluster that Federation can spread resources to
        displayName: FederatedCluster Resource
        kind: FederatedCluster
        name: federatedclusters.core.federation.k8s.io
        version: v1alpha1
      - description: Programs Federation to be aware of a new API type
        displayName: Federation Type Configuration
        kind: FederatedTypeConfig
        name: federatedtypeconfigs.core.federation.k8s.io
        version: v1alpha1
      - description: Represents the status of a FederatedService
        displayName: Federated service status
        kind: FederatedServiceStatus
        name: federatedservicestatuses.core.federation.k8s.io
        version: v1alpha1
      - description: Represents a configuration of a Federation controller
        displayName: FederationConfig
        kind: FederationConfig
        name: federationconfigs.core.federation.k8s.io
        version: v1alpha1
      - description: Represents information about the version of a federated resource
        displayName: PropagatedVersion Resource
        kind: PropagatedVersion
        name: propagatedversions.core.federation.k8s.io
        version: v1alpha1
      - description: Represents an instance of a DNSEndpoint resource
        displayName: DNSEndpoint Resource
        kind: DNSEndpoint
        name: dnsendpoints.multiclusterdns.federation.k8s.io
        version: v1alpha1
      - description: Represents an instance of a MultiClusterIngressDNSRecord resource
        displayName: MultiClusterIngressDNSRecord Resource
        kind: IngressDNSRecord
        name: ingressdnsrecords.multiclusterdns.federation.k8s.io
        version: v1alpha1
      - description: Represents an instance of a MultiClusterServiceDNSRecord resource
        displayName: MultiClusterServiceDNSRecord Resource
        kind: ServiceDNSRecord
        name: servicednsrecords.multiclusterdns.federation.k8s.io
        version: v1alpha1
      - description: Represents an instance of a ReplicaSchedulingPreference resource
        displayName: ReplicaSchedulingPreference Resource
        kind: ReplicaSchedulingPreference
        name: replicaschedulingpreferences.scheduling.federation.k8s.io
        version: v1alpha1
  description: "Kubernetes Federation is a tool to sync (aka \"federate\") a set of\
    \ Kubernetes\nobjects from a \"source\" into a set of other clusters. Common use-cases\n\
    include federating Namespaces across all of your clusters or rolling out an\n\
    application across several geographically distributed clusters. The\nKubernetes\
    \ Federation Operator runs all of the components under the hood to\nquickly get\
    \ up and running with this powerful concept. Federation is a key\npart of any\
    \ Hybrid Cloud capability.\n\nKubernetes Federation is currently in preview. This\
    \ operator will be updated\nas we release new versions of the [upstream repository](https://github.com/kubernetes-sigs/federation-v2).\n\
    \n**Important Note**: Currently, while in preview, this operator does not\nsupport\
    \ automatic upgrades. You must remove the old version of the operator\nmanually\
    \ before installing a new version.\n\n## Using Federation\n\nThis deploys Federation\
    \ in a namespace-scoped configuration which handles\nthe resources only in the\
    \ namespace where federation is deployed. For\nexample, if you subscribe to this\
    \ package in namespace `my-namespace`,\nfederation will be deployed to manage\
    \ objects _only_ in `my-namespace` in\nthe host cluster and target clusters.\n\
    \nAfter installing Federation instance, you will use the `kubefedctl` command\n\
    line tool to do two types of configuration:\n  \n- Configure federation to connect\
    \ to your target clusters with `kubefedctl join`\n- Create new federation APIs\
    \ for the API types you want to federate with `kubefedctl enable`\n\n\n**Important\
    \ Note**: To add federation capability to your namespace, you are\nonly required\
    \ to install federation in the hosting cluster; there is no need\nto install federation\
    \ in the target clusters (and no effect gained from\ndoing so).\n\n\n**Important\
    \ Note**: The instructions in this guide refer to the namespace\nwhere federation\
    \ is installed as `<namespace>` in command examples. The\nupstream user guide\
    \ uses `federation-system` as the name of this namespace.\n\n### Get the kubefedctl\
    \ CLI tool\n\nBefore you use federation, you should ensure that you're using the\
    \ binary\nfor this version. You can get it from the releases on GitHub.\n\n  \
    \  curl -Ls https://github.com/kubernetes-sigs/federation-v2/releases/download/v0.0.10/kubefedctl.tgz\
    \ | tar xz\n\n### Joining Clusters\n\nUse the `kubefedctl join` command to connect\
    \ clusters you want federation to\nspread resources to. `kubefedctl join` reads\
    \ information about how to connect\nto the joining cluster and the cluster hosting\
    \ federation from your\nKUBECONFIG.\n\n    kubefedctl join cluster-name \\\n \
    \     --cluster-context mycluster \\            # name of a KUBECONFIG context\
    \ for the cluster to join\n      --host-cluster-context mycluster \\       # name\
    \ of a KUBECONFIG context for the hosting cluster\n      --add-to-registry \\\
    \                      # add clusters to the cluster-registry\n      --federation-namespace=<namespace>\
    \ \\     # namespace where federation is deployed\n      --registry-namespace=<namespace>\
    \ \\       # namespace where federation is deployed\n      --limited-scope=true\
    \ \\                   # ensure that created serviceaccount has permissions only\
    \ scoped to the namespace\n      -v 2\n\n`kubefedctl join` creates `FederatedCluster`\
    \ and `Cluster` resources named\n`cluster-name` to represent the joined cluster.\n\
    \n`Cluster` resources hold endpoint information about clusters federation connects\
    \ to.\n\n    kubectl get clusters -n <namespace>\n    NAME           AGE\n   \
    \ cluster-name   7s\n\n    kubectl get clusters cluster-name -o yaml\n    apiVersion:\
    \ clusterregistry.k8s.io/v1alpha1\n    kind: Cluster\n    metadata:\n      creationTimestamp:\
    \ 2019-03-12T22:51:47Z\n      generation: 1\n      name: cluster-name\n      namespace:\
    \ <namespace>\n      resourceVersion: \"42099\"\n      selfLink: /apis/clusterregistry.k8s.io/v1alpha1/namespaces/<namespace>/clusters/cluster-name\n\
    \      uid: 6aa9f784-4519-11e9-baaf-02de7fb9d5b2\n    spec:\n      authInfo: {}\n\
    \      kubernetesApiEndpoints:\n        serverEndpoints:\n        - clientCIDR:\
    \ 0.0.0.0/0\n          serverAddress: https://cluster-name.example.com:6443\n\
    \    status: {}\n\n`FederatedCluster` resources pair `Cluster` resources to secrets\
    \ holding\n`KUBECONFIG` information that federation uses to connect to `Clusters`.\n\
    \n    kubectl get federatedclusters -n <namespace>\n    NAME           AGE\n \
    \   cluster-name   7s\n    \n    kubectl get federatedclusters cluster-name -o\
    \ yaml                                                                       \
    \                                                                            \
    \                  \n    apiVersion: core.federation.k8s.io/v1alpha1\n    kind:\
    \ FederatedCluster\n    metadata:\n      creationTimestamp: 2019-03-12T22:51:48Z\n\
    \      generation: 1\n      name: cluster-name\n      namespace: <namespace>\n\
    \      resourceVersion: \"145794\"\n      selfLink: /apis/core.federation.k8s.io/v1alpha1/namespaces/<namespace>/federatedclusters/cluster-name\
    \                                                                            \
    \                             \n      uid: 6ad4738c-4519-11e9-baaf-02de7fb9d5b2\n\
    \    spec:\n      clusterRef:\n        name: cluster-name\n      secretRef:\n\
    \        name: cluster-name-nfs7m\n    status:\n      conditions:\n      - lastProbeTime:\
    \ 2019-03-13T01:38:02Z\n        lastTransitionTime: 2019-03-12T22:57:52Z\n   \
    \     message: /healthz responded with ok\n        reason: ClusterReady\n    \
    \    status: \"True\"\n        type: Ready\n      region: us-east-1\n      zone:\
    \ us-east-1a\n\nSee also the upstream [user guide](https://github.com/kubernetes-sigs/federation-v2/blob/v0.0.10/docs/userguide.md#join-clusters)\
    \ for more information.\n\n### Unjoining Clusters\n\nUse the `kubefedctl unjoin`\
    \ command to remove a previously joined cluster.\n\n    kubefedctl unjoin mycluster\
    \ \\\n      --host-cluster-context mycluster \\       # name of a KUBECONFIG context\
    \ for the hosting cluster\n      --registry-namespace=<namespace> \\       # namespace\
    \ where federation is deployed\n      -v 2\n\nThis command deletes the `FederatedCluster`\
    \ and `Cluster` for the unjoining\ncluster.\n\n    kubectl get federatedclusters\
    \ -n <namespace>\n    No resources found.\n\n    kubectl get clusters -n <namespace>\n\
    \    No resources found.\n\n### Enabling federation for new API types\n\nFederation\
    \ allows you to spread any API type to target clusters. Use\n`kubefedctl enable\
    \ <API type>` for the API types you want to add federation\ncapability for. Enabling\
    \ federation for an API type does two things:\n\n1. Creates a new API type to\
    \ represent the federation API surface for that type\n\n\n2. Creates a `FederatedTypeConfig`\
    \ resource that tells the federation\n  controller to handle the new federation\
    \ API\n\n\n    kubefedctl enable deployments.extensions \\\n      --federation-namespace=<namespace>\n\
    \nRunning this command produces a new CRD in the hosting cluster to be the\nfederation\
    \ API surface for the deployments resource.\n\n    kubectl get crd/federateddeployments.types.federation.k8s.io\n\
    \    No resources found.\n\n`FederatedTypeConfig` resources configure federation\
    \ to watch the new\nfederation API surface created by `kubefedctl enable`.\n\n\
    \    kubectl get federatedtypeconfigs -n <namespace>\n\n\n**Important Note**:\
    \ Federation of a CRD requires that the CRD be installed\non all member clusters.\
    \ If the CRD is not installed on a member cluster,\npropagation to that cluster\
    \ will fail.\n\n\n**Important Note**: You must enable Federation support for Namespaces\
    \ in\nthis configuration before other types will work. Use `kubefedctl enable\n\
    namespaces`.\n\n\n**Important Note**: Federation is currently installed **without**\
    \ any\n`FederatedTypeConfig` resources created. You must run `kubefedctl enable`\n\
    operation for each API type you want to add federation capability for.\n\nSee\
    \ also the upstream [user guide](https://github.com/kubernetes-sigs/federation-v2/blob/v0.0.10/docs/userguide.md#enabling-federation-of-an-api-type)\
    \ for more information.\n\n### Example: federating deployments\n\nLet's do an\
    \ example using the `deployments` resource.\n\n    kubectl create -f - <<END\n\
    \    apiVersion: types.federation.k8s.io/v1alpha1\n    kind: FederatedDeployment\n\
    \    metadata:\n      name: hello\n      namespace: <namespace>\n    spec:\n \
    \     placement:\n        clusterNames:\n        - cluster-name\n      template:\n\
    \        apiVersion: extensions/v1beta1\n        kind: Deployment\n        metadata:\n\
    \          name: hello\n        spec:\n          replicas: 1\n          template:\n\
    \            metadata:\n              labels:\n                app: hello\n  \
    \          spec:\n              containers:\n              - name: hello\n   \
    \             image: openshift/hello-openshift:latest\n                ports:\n\
    \                - containerPort: 80\n    END\n\nYou should be able to see the\
    \ deployment in the target cluster!\n\n    kubectl get deployments\n    NAME \
    \   READY   UP-TO-DATE   AVAILABLE   AGE\n    hello   1/1     1            1 \
    \          33s\n\n### Disabling federation for an API type\n\nUse the `kubefedctl\
    \ disable` command to disable federation for an API type.\n\n    kubefedctl disable\
    \ deployments.extensions --federation-namespace=<namespace>\n\nThis will disable\
    \ the propagation of federated deployments, but leave the\nAPI surface and `FederatedTypeConfig`\
    \ intact.\n\nTo fully remove the API surface, use the `--delete-from-api` flag:\n\
    \n    kubefedctl disable deployments.extensions --federation-namespace=<namespace>\
    \ --delete-from-api\n\nSee also the upstream [user guide](https://github.com/kubernetes-sigs/federation-v2/blob/v0.0.10/docs/userguide.md#disabling-federation-of-an-api-type)\
    \ for more information.\n"
  displayName: Federation
  install:
    spec:
      deployments:
        - name: federation-controller-manager
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: federation-controller-manager
            template:
              metadata:
                labels:
                  app: federation-controller-manager
              spec:
                containers:
                  - args:
                      - --federation-namespace=$(FEDERATION_NAMESPACE)
                      - -v=5
                      - --logtostderr
                    command:
                      - /root/controller-manager
                    env:
                      - name: DEFAULT_FEDERATION_SCOPE
                        value: Namespaced
                      - name: FEDERATION_NAMESPACE
                        valueFrom:
                          fieldRef:
                            fieldPath: metadata.namespace
                    image: quay.io/kubernetes-multicluster/federation-v2:v0.0.10
                    imagePullPolicy: IfNotPresent
                    name: controller-manager
                    resources:
                      limits:
                        cpu: 100m
                        memory: 128Mi
                      requests:
                        cpu: 100m
                        memory: 64Mi
                restartPolicy: Always
                serviceAccount: federation-controller-manager
                serviceAccountName: federation-controller-manager
                terminationGracePeriodSeconds: 5
      permissions:
        - rules:
            - apiGroups:
                - clusterregistry.k8s.io
              resources:
                - clusters
              verbs:
                - '*'
            - apiGroups:
                - core.federation.k8s.io
              resources:
                - '*'
              verbs:
                - '*'
            - apiGroups:
                - types.federation.k8s.io
              resources:
                - '*'
              verbs:
                - '*'
            - apiGroups:
                - multiclusterdns.federation.k8s.io
              resources:
                - '*'
              verbs:
                - '*'
            - apiGroups:
                - scheduling.federation.k8s.io
              resources:
                - '*'
              verbs:
                - '*'
            - apiGroups:
                - ''
              resources:
                - pods
                - services
                - endpoints
                - persistentvolumeclaims
                - events
                - configmaps
                - secrets
              verbs:
                - '*'
            - apiGroups:
                - apps
              resources:
                - deployments
                - daemonsets
                - replicasets
                - statefulsets
              verbs:
                - '*'
          serviceAccountName: federation-controller-manager
    strategy: deployment
  installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: false
      type: AllNamespaces
  keywords:
    - kubernetes
    - federation
    - hybrid
    - hybrid cloud
    - multi-cluster
    - cluster
  labels:
    alm-owner-federation: federation
    alm-status-descriptors: federation.v0.0.10
  links:
    - name: Federation Concepts
      url: https://github.com/kubernetes-sigs/federation-v2#concepts
  maturity: alpha
  provider:
    name: Red Hat
  version: 0.0.10
